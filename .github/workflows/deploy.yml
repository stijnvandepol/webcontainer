name: Build and Deploy to Docker Hub

on:
  push:
    branches:
      - main  # Pas dit aan naar de branch die je wilt gebruiken

jobs:
  build:
    # Gebruik een zelf-gehoste runner met het label 'docker-server'
    runs-on: [self-hosted, docker-server]

    steps:
    # Stap 1: Checkout de code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Stap 2: Log in op Docker Hub met bestaande secrets
    - name: Log in to Docker Hub
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin

    # Stap 3: Bouw de Docker-container
    - name: Build the Docker image
      run: docker build -t stijn0vp/website:latest .

    # Stap 4: Push de Docker-image naar Docker Hub
    - name: Push Docker image to Docker Hub
      run: docker push stijn0vp/website:latest

    # Stap 5: Run de Docker-container op de runner met label 'docker-server'
    - name: Deploy container
      run: |
        docker pull stijn0vp/website:latest
        
        # Check if both containers exist
        BLUE_EXISTS=$(docker ps -a --filter "name=blue" --format "{{.Names}}")
        GREEN_EXISTS=$(docker ps -a --filter "name=green" --format "{{.Names}}")

        if [ -z "$BLUE_EXISTS" ] && [ -z "$GREEN_EXISTS" ]; then                    #Als beide containers niet bestaan, deploy blue
          docker run -d -p 8081:80 --name blue stijn0vp/website:latest
        elif [ -z "$BLUE_EXISTS" ]; then                                            #Als blue niet bestaat, deploy blue
          docker run -d -p 8081:80 --name blue stijn0vp/website:latest
        elif [ -z "$GREEN_EXISTS" ]; then                                           #Als green niet bestaat, deploy green
          docker run -d -p 8082:80 --name green stijn0vp/website:latest
        else
          BLUE_UPTIME=$(docker inspect -f '{{.State.StartedAt}}' blue)              #Als beide containers bestaan, stop de oudste en deploy de nieuwe
          GREEN_UPTIME=$(docker inspect -f '{{.State.StartedAt}}' green)
          if [ "$BLUE_UPTIME" \< "$GREEN_UPTIME" ]; then
            docker stop blue
            docker rm blue
            docker run -d -p 8081:80 --name blue stijn0vp/website:latest
          else
            docker stop green
            docker rm green
            docker run -d -p 8082:80 --name green stijn0vp/website:latest
          fi
        fi

  approval:
    runs-on: [self-hosted, haproxy-server]

    needs: build

    steps:
    # Stap 6: Manual approval
    - name: Await manual approval
      uses: peter-evans/wait-for-approval@v2
      with:
        approval-type: explicit

    # Stap 7: Schakel HAProxy naar de nieuwe container op poort 80
    - name: Update HAProxy config
      run: |
        BLUE_EXISTS=$(docker ps -a --filter "name=blue" --format "{{.Names}}")
        GREEN_EXISTS=$(docker ps -a --filter "name=green" --format "{{.Names}}")

        if [ ! -z "$BLUE_EXISTS" ]; then
          NEW_BACKEND="server blue 127.0.0.1:8081 check"   # Direct verkeer naar de 'blue' container
        else
          NEW_BACKEND="server green 127.0.0.1:8082 check"  # Direct verkeer naar de 'green' container
        fi

        # Update HAProxy config
        sudo sed -i '/^    server/s/.*/    '$NEW_BACKEND'/' /etc/haproxy/haproxy.cfg
        
        # Restart HAProxy to apply changes
        sudo systemctl restart haproxy