name: Blue/Green Deployment

on:
  push:
    branches:
      - main  # Voor builds bij push naar de 'main' branch

jobs:
  build:
    # Gebruik een zelf-gehoste runner met het label 'docker-server'
    runs-on: [self-hosted, docker-server]

    steps:
    # Stap 1: Checkout de code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Stap 2: Log in op Docker Hub met bestaande secrets
    - name: Log in to Docker Hub
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin

    # Stap 3: Bouw de Docker-container
    - name: Build the Docker image
      run: docker build -t stijn0vp/website:latest .

    # Stap 4: Push de Docker-image naar Docker Hub
    - name: Push Docker image to Docker Hub
      run: docker push stijn0vp/website:latest

    # Stap 5: Bepaal welke container (blue of green) actief moet zijn
    - name: Determine active container
      id: determine-container
      run: |
        # Lees de huidige status uit het statusbestand
        if [ -f deploy-status.txt ]; then
          CURRENT_CONTAINER=$(cat deploy-status.txt)
        else
          CURRENT_CONTAINER="green"
        fi

        # Wissel tussen blue en green
        if [ "$CURRENT_CONTAINER" = "blue" ]; then
          NEXT_CONTAINER="green"
        else
          NEXT_CONTAINER="blue"
        fi

        # Schrijf de nieuwe status terug naar het statusbestand
        echo $NEXT_CONTAINER > deploy-status.txt

        # Sla de nieuwe container op als output
        echo "::set-output name=next-container::$NEXT_CONTAINER"

    # Stap 6: Deploy de nieuwe container op de Docker-server
    - name: Deploy container
      run: |
        docker pull stijn0vp/website:latest
        
        NEXT_CONTAINER=${{ steps.determine-container.outputs.next-container }}

        if [ "$NEXT_CONTAINER" = "blue" ]; then
          docker stop green || true
          docker rm green || true
          docker run -d -p 8081:80 --name blue stijn0vp/website:latest
        else
          docker stop blue || true
          docker rm blue || true
          docker run -d -p 8082:80 --name green stijn0vp/website:latest
        fi

  # Schakel HAProxy naar de nieuwe container
  update-haproxy:
    runs-on: [self-hosted, haproxy-server]
    needs: build

    steps:
    # Stap 7: Schakel HAProxy naar de juiste container
    - name: Update HAProxy config
      run: |
        NEXT_CONTAINER=${{ steps.determine-container.outputs.next-container }}

        if [ "$NEXT_CONTAINER" = "blue" ]; then
          NEW_BACKEND="server blue 172.16.2.40:8081 check"
        else
          NEW_BACKEND="server green 172.16.2.40:8082 check"
        fi

        # Update HAProxy config
        sudo sed -i '/^    server/s/.*/    '$NEW_BACKEND'/' /etc/haproxy/haproxy.cfg
        
        # Restart HAProxy to apply changes
        sudo systemctl restart haproxy

    # Stap 8: Update het statusbestand in de repository
    - name: Commit and push updated status
      run: |
        git config --global user.email "your-email@example.com"
        git config --global user.name "Your Name"
        git add deploy-status.txt
        git commit -m "Update deploy status to $NEXT_CONTAINER"
        git push
