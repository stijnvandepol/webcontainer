name: Build and Deploy to Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: [self-hosted, docker-server]

    steps:
    # Stap 1: Checkout de code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Stap 2: Log in op Docker Hub
    - name: Log in to Docker Hub
      run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin

    # Stap 3: Bouw de Docker-image
    - name: Build the Docker image
      run: docker build -t stijn0vp/website:latest .

    # Stap 4: Push de Docker-image naar Docker Hub
    - name: Push Docker image to Docker Hub
      run: docker push stijn0vp/website:latest

    # Stap 5: Bepaal welke container het langst draait en vervang deze, of start 'blue' als beide niet bestaan
    - name: Determine longest running container
      id: env
      run: |
        # Controleer of de containers bestaan
        if docker ps -a --format '{{.Names}}' | grep -Eq "^website-blue$"; then
          blue_started=$(docker inspect -f '{{ .State.StartedAt }}' website-blue)
        else
          blue_started="none"
        fi
        
        if docker ps -a --format '{{.Names}}' | grep -Eq "^website-green$"; then
          green_started=$(docker inspect -f '{{ .State.StartedAt }}' website-green)
        else
          green_started="none"
        fi

        # Bepaal welke container moet worden vervangen of start de eerste container
        if [ "$blue_started" = "none" ] && [ "$green_started" = "none" ]; then
          echo "env=blue" >> $GITHUB_ENV
          echo "No containers running, deploying first container to blue."
        elif [ "$blue_started" = "none" ]; then
          echo "env=blue" >> $GITHUB_ENV
        elif [ "$green_started" = "none" ]; then
          echo "env=green" >> $GITHUB_ENV
        elif [ "$blue_started" \< "$green_started" ]; then
          echo "env=blue" >> $GITHUB_ENV
        else
          echo "env=green" >> $GITHUB_ENV

    # Stap 6: Vervang de container die het langst draaide, of start de eerste container
    - name: Deploy to Docker container
      run: |
        docker pull stijn0vp/website:latest

        if [ "${{ env.env }}" = "blue" ]; then
          docker stop website-blue || true
          docker rm website-blue || true
          docker run -d -p 8080:80 --name website-blue stijn0vp/website:latest
        else
          docker stop website-green || true
          docker rm website-green || true
          docker run -d -p 8081:80 --name website-green stijn0vp/website:latest
